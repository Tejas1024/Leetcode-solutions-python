"""
🔢 LeetCode 117: Populating Next Right Pointers in Each Node II
🔗 Problem link: https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/

🧩 Problem Statement:
Given a binary tree where each node has an extra pointer `next` that should point to its next right node.
If there is no next right node, the `next` pointer should be set to `None`.

Initially, all `next` pointers are set to `None`.

📌 Note:
- You must solve the problem using constant extra space.
- The recursive approach is fine because the implicit stack space does not count as extra space for this problem.

👨‍💻 Example:
Input Tree:
        1
       / \
      2   3
     / \   \
    4   5   7

Output (connected next pointers):
        1 -> None
       / \
      2 -> 3 -> None
     / \    \
    4-> 5 -> 7 -> None

✅ Constraints:
- The number of nodes in the tree is in the range [0, 6000].
- -100 <= Node.val <= 100
"""

# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return None
        
        current = root  # Start with the root node

        while current:
            dummy = Node(0)   # Dummy node to track head of next level
            tail = dummy      # Tail will move to build the next level's linked list

            # Traverse nodes in the current level
            while current:
                if current.left:
                    tail.next = current.left
                    tail = tail.next
                if current.right:
                    tail.next = current.right
                    tail = tail.next
                current = current.next  # Move across current level using .next pointers

            # Move to the next level
            current = dummy.next
        
        return root
