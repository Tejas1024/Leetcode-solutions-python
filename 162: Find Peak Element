LeetCode Problem 162: Find Peak Element  
Difficulty: Medium  

-----------------------------------------------------------
Problem Statement:  
A peak element is an element that is strictly greater than its neighbors.  

Given an integer array nums, find a peak element, and return its index.  
If the array contains multiple peaks, return the index to any of the peaks.  

You may imagine that nums[-1] = -âˆž and nums[n] = -âˆž.  

You must write an algorithm that runs in O(log n) time.  

Example 1:  
Input: nums = [1,2,3,1]  
Output: 2  
Explanation: nums[2] = 3 is a peak element because it's greater than neighbors.  

Example 2:  
Input: nums = [1,2,1,3,5,6,4]  
Output: 1 or 5  
Explanation: Both nums[1] = 2 and nums[5] = 6 are peaks.  
-----------------------------------------------------------  

âœ… Approach: Binary Search  
1. A peak element is larger than its neighbors.  
2. Instead of linearly checking, use binary search:  
   - Pick mid index.  
   - Compare nums[mid] with nums[mid + 1].  
3. If nums[mid] < nums[mid + 1], the peak lies on the right side â†’ move left = mid + 1.  
4. Otherwise, the peak lies on the left side (including mid) â†’ move right = mid.  
5. Continue until left == right â†’ this index is a peak.  

This works because:  
- If nums[mid] < nums[mid+1], we are on an increasing slope â†’ peak must exist to the right.  
- If nums[mid] > nums[mid+1], we are on a decreasing slope â†’ peak must exist to the left or at mid.  

-----------------------------------------------------------

class Solution:
    def findPeakElement(self, nums):
        left, right = 0, len(nums) - 1

        while left < right:
            mid = (left + right) // 2

            if nums[mid] < nums[mid + 1]:
                left = mid + 1  # move to right side
            else:
                right = mid  # move to left side (mid can still be a peak)

        return left  # or right, since left == right

-----------------------------------------------------------
ðŸ“Š Time Complexity: O(log n)  
- Each step halves the search space.  

ðŸ§  Space Complexity: O(1)  
- No extra space used.  
-----------------------------------------------------------
