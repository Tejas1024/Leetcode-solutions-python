# LeetCode 199. Binary Tree Right Side View
# Problem: Given the root of a binary tree, return the values of the nodes you can see
#          ordered from top to bottom when looking at the tree from the right side.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

from typing import List, Optional


class Solution:
    # -------------------------
    # BFS Approach (Level Order)
    # -------------------------
    def rightSideView_BFS(self, root: Optional[TreeNode]) -> List[int]:
        """
        Breadth-First Search (Level Order Traversal).
        For each level, take the last node (rightmost).
        Time Complexity: O(n)  |  Space Complexity: O(n)
        """
        if not root:
            return []

        queue = [root]   # Using list as a queue
        result = []

        while queue:
            level_size = len(queue)
            for i in range(level_size):
                node = queue.pop(0)  # Take from front of queue

                # If it's the last node in this level, it's visible from the right
                if i == level_size - 1:
                    result.append(node.val)

                # Add children to queue for next level
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

        return result

    # -------------------------
    # DFS Approach (Preorder: Root -> Right -> Left)
    # -------------------------
    def rightSideView_DFS(self, root: Optional[TreeNode]) -> List[int]:
        """
        Depth-First Search (Modified Preorder: root -> right -> left).
        First time we visit a depth, we record the node (since right is visited first).
        Time Complexity: O(n)  |  Space Complexity: O(h), h = tree height
        """
        result = []

        def dfs(node, depth):
            if not node:
                return

            # If this is the first time we visit this depth, add it
            if depth == len(result):
                result.append(node.val)

            # Visit right before left
            dfs(node.right, depth + 1)
            dfs(node.left, depth + 1)

        dfs(root, 0)
        return result


# -------------------------
# Example Usage (Uncomment when testing locally)
# -------------------------
# root = TreeNode(1)
# root.left = TreeNode(2)
# root.right = TreeNode(3)
# root.left.right = TreeNode(5)
# root.right.right = TreeNode(4)
#
# sol = Solution()
# print(sol.rightSideView_BFS(root))  # Output: [1, 3, 4]
# print(sol.rightSideView_DFS(root))  # Output: [1, 3, 4]
