"""
LeetCode Problem 46: Permutations
Difficulty: Medium

-----------------------------------------------------------
Problem Statement:
Given an array nums of distinct integers, return all the possible 
permutations. You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]
-----------------------------------------------------------

âœ… Approach:
1. Use **backtracking** to generate all permutations.
   - Start with an empty path.
   - At each step, choose one unused number and add it to the path.
   - Continue until the path length == nums length.
   - Add that path to results.
2. Backtrack to explore other possibilities.

Why Backtracking?
- Because we need to explore all possible orders of the numbers.
-----------------------------------------------------------
"""

class Solution:
    def permute(self, nums):
        result = []  # To store all permutations

        def backtrack(path, used):
            # Base case: when path has all numbers â†’ one permutation complete
            if len(path) == len(nums):
                result.append(path[:])  # append a copy
                return

            # Try each number
            for i in range(len(nums)):
                if not used[i]:
                    # Choose
                    used[i] = True
                    path.append(nums[i])

                    # Explore
                    backtrack(path, used)

                    # Undo choice (backtrack)
                    path.pop()
                    used[i] = False

        backtrack([], [False] * len(nums))
        return result


"""
-----------------------------------------------------------
ðŸ“Š Time Complexity: O(n * n!)
- There are n! permutations.
- Each permutation takes O(n) to build.

ðŸ§  Space Complexity: O(n)
- Recursion depth is at most n.
- Result list stores all permutations.
-----------------------------------------------------------
"""
