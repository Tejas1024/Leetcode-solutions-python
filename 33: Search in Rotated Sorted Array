LeetCode Problem 33: Search in Rotated Sorted Array  
Difficulty: Medium  

-----------------------------------------------------------
Problem Statement:  
There is an integer array nums sorted in ascending order (with distinct values).  

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length).  

For example: [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2].  

Given the array nums after rotation and an integer target,  
return the index of target if it is in nums, or -1 if it is not.  

You must write an algorithm with O(log n) runtime complexity.  

Example 1:  
Input: nums = [4,5,6,7,0,1,2], target = 0  
Output: 4  

Example 2:  
Input: nums = [4,5,6,7,0,1,2], target = 3  
Output: -1  

Example 3:  
Input: nums = [1], target = 0  
Output: -1  
-----------------------------------------------------------  

âœ… Approach: Modified Binary Search  
1. Since the array is rotated, one half (left or right) will always be sorted.  
2. Use binary search:  
   - Find mid = (left + right) // 2.  
   - Check if nums[mid] == target â†’ return mid.  
   - If left half is sorted (nums[left] <= nums[mid]):  
       - If target lies within nums[left] to nums[mid], move right = mid - 1.  
       - Else, move left = mid + 1.  
   - Else (right half is sorted):  
       - If target lies within nums[mid] to nums[right], move left = mid + 1.  
       - Else, move right = mid - 1.  
3. Continue until left > right.  
4. If not found, return -1.  

This works because binary search logic adapts to the rotation by checking which half is sorted.  

-----------------------------------------------------------
class Solution:
    def search(self, nums, target):
        left, right = 0, len(nums) - 1

        while left <= right:
            mid = (left + right) // 2

            if nums[mid] == target:
                return mid

            # Left half is sorted
            if nums[left] <= nums[mid]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            # Right half is sorted
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1

        return -1
-----------------------------------------------------------
ðŸ“Š Time Complexity: O(log n)  
- Binary search halves the range each step.  

ðŸ§  Space Complexity: O(1)  
- No extra space used.  
-----------------------------------------------------------

