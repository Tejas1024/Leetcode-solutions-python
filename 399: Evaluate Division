"""
LeetCode 399. Evaluate Division

Problem:
You are given an array of equations A / B = k, where A and B are variables represented as strings,
and k is a floating-point number. Some queries are also given, where you must evaluate A / B.

If the answer does not exist, return -1.0.

------------------------------------------------------------
Example:
Input:
equations = [["a","b"],["b","c"]]
values = [2.0, 3.0]
queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]

Output:
[6.0, 0.5, -1.0, 1.0, -1.0]

Explanation:
- a / b = 2.0
- b / c = 3.0
So, a / c = a/b * b/c = 2.0 * 3.0 = 6.0
------------------------------------------------------------
Approach:
1. Build a graph where each variable is a node, and edges store ratios.
   Example: a -> b = 2.0, b -> a = 1/2.0
2. For each query, perform DFS to find a path between nodes.
   Multiply edge weights along the path to get the result.
3. If no path exists, return -1.0.
------------------------------------------------------------
Time Complexity:
- Building graph: O(N) where N = number of equations
- Each query: O(V + E) in worst case (DFS traversal)
- Overall: O(N + Q * (V + E))
------------------------------------------------------------
"""

class Solution:
    def calcEquation(self, equations, values, queries):
        # Step 1: Build graph
        graph = {}
        for (a, b), val in zip(equations, values):
            if a not in graph:
                graph[a] = {}
            if b not in graph:
                graph[b] = {}
            graph[a][b] = val
            graph[b][a] = 1.0 / val

        # Step 2: DFS search
        def dfs(start, end, visited):
            if start == end:
                return 1.0
            visited.add(start)
            for neighbor, value in graph[start].items():
                if neighbor in visited:
                    continue
                result = dfs(neighbor, end, visited)
                if result != -1.0:
                    return value * result
            return -1.0

        # Step 3: Answer queries
        results = []
        for x, y in queries:
            if x not in graph or y not in graph:
                results.append(-1.0)
            else:
                results.append(dfs(x, y, set()))
        return results


# --------------------------
# Example Run (for testing)
# --------------------------
if __name__ == "__main__":
    equations = [["a","b"],["b","c"]]
    values = [2.0, 3.0]
    queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
    print(Solution().calcEquation(equations, values, queries))
    # Expected Output: [6.0, 0.5, -1.0, 1.0, -1.0]   - Add edge B -> A with weight 1/k.
3. To answer a query C / D:
   - Use DFS to find a path from C to D, multiplying edge weights along the path.
   - If no path exists, return -1.0.

---------------------------------
Time Complexity:
- Building graph: O(N), where N is number of equations.
- Answering queries: O(Q * N), since DFS may visit all nodes per query.
  (Q = number of queries)

Space Complexity:
O(N), for storing the graph and visited set.
"""

class Solution:
    def calcEquation(self, equations, values, queries):
        # Step 1: Build the graph
        graph = {}
        
        for (a, b), val in zip(equations, values):
            if a not in graph:
                graph[a] = {}
            if b not in graph:
                graph[b] = {}
            graph[a][b] = val
            graph[b][a] = 1 / val

        # Step 2: DFS to evaluate query
        def dfs(curr, target, visited):
            if curr not in graph or target not in graph:
                return -1.0
            if curr == target:
                return 1.0
            visited.add(curr)
            for neighbor, val in graph[curr].items():
                if neighbor not in visited:
                    result = dfs(neighbor, target, visited)
                    if result != -1.0:
                        return val * result
            return -1.0

        # Step 3: Process each query
        results = []
        for a, b in queries:
            results.append(dfs(a, b, set()))
        
        return results3. For each query (X, Y), perform DFS/BFS to find if a path exists.
4. Multiply weights along the path to compute result.
5. If no path exists, return -1.0.

---------------------------------------
Time Complexity:
O(N + Q * M), where:
- N = number of equations,
- Q = number of queries,
- M = number of neighbors explored per query.
Worst case: visiting all nodes per query.

Space Complexity:
O(N), for the graph storage and recursion stack.
"""

from collections import defaultdict

class Solution:
    def calcEquation(self, equations, values, queries):
        graph = defaultdict(dict)

        # Build the graph
        for (a, b), val in zip(equations, values):
            graph[a][b] = val
            graph[b][a] = 1 / val

        # DFS helper function
        def dfs(start, end, visited):
            if start not in graph or end not in graph:
                return -1.0
            if start == end:
                return 1.0

            visited.add(start)

            for neighbor, val in graph[start].items():
                if neighbor not in visited:
                    result = dfs(neighbor, end, visited)
                    if result != -1.0:
                        return result * val

            return -1.0

        # Process queries
        result = []
        for x, y in queries:
            result.append(dfs(x, y, set()))

        return result
