"""
LeetCode 136. Single Number

📝 Question:
Given a non-empty array of integers nums, every element appears twice except for one. 
Find that single one.

You must implement a solution with a linear runtime complexity 
and use only constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1


-----------------------------------------------------------
✅ Approach: XOR Property
1. XOR of a number with itself = 0
   (e.g., 4 ^ 4 = 0)
2. XOR of a number with 0 = number itself
   (e.g., 0 ^ 5 = 5)
3. Since all numbers except one appear twice, 
   XOR-ing all numbers cancels out duplicates and leaves the unique number.

-----------------------------------------------------------
💻 Solution:
"""

class Solution:
    def singleNumber(self, nums: list[int]) -> int:
        result = 0
        for num in nums:
            result ^= num   # XOR cancels duplicates
        return result


"""
-----------------------------------------------------------
⏱️ Time Complexity: O(n)  
   - We traverse the list once.

💾 Space Complexity: O(1)  
   - Only one variable 'result' is used.
-----------------------------------------------------------
"""
