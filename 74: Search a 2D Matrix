LeetCode Problem 74: Search a 2D Matrix  
Difficulty: Medium  

-----------------------------------------------------------
Problem Statement:  
You are given an m x n integer matrix with the following properties:  
1. Each row is sorted in ascending order.  
2. The first integer of each row is greater than the last integer of the previous row.  

Given an integer target, return true if target is in the matrix or false otherwise.  

You must write a solution in O(log(m * n)) time complexity.  

Example 1:  
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3  
Output: true  

Example 2:  
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13  
Output: false  
-----------------------------------------------------------  

âœ… Approach: Binary Search on Flattened Matrix  
1. Treat the 2D matrix as a 1D sorted array (since rows are sorted and non-overlapping).  
   Example: [[1,3,5],[7,9,11]] â†’ [1,3,5,7,9,11]  
2. Apply binary search on indices `0` to `m*n - 1`.  
3. Convert a 1D index to 2D coordinates:  
   - `row = mid // n`  
   - `col = mid % n`  
4. Compare `matrix[row][col]` with target.  
   - If equal â†’ return True  
   - If smaller â†’ search right half  
   - If larger â†’ search left half  
5. If loop ends, return False.  

-----------------------------------------------------------
class Solution:
    def searchMatrix(self, matrix, target):
        if not matrix or not matrix[0]:
            return False

        m, n = len(matrix), len(matrix[0])
        left, right = 0, m * n - 1

        while left <= right:
            mid = (left + right) // 2
            row, col = divmod(mid, n)  # same as row = mid // n, col = mid % n

            if matrix[row][col] == target:
                return True
            elif matrix[row][col] < target:
                left = mid + 1
            else:
                right = mid - 1

        return False


-----------------------------------------------------------
ðŸ“Š Time Complexity: O(log(m*n))  
- Binary search on m*n elements.  

ðŸ§  Space Complexity: O(1)  
- Constant extra space used.  
-----------------------------------------------------------
