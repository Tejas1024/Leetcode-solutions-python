# 103. Binary Tree Zigzag Level Order Traversal

## Problem Statement
Given the root of a binary tree, return the zigzag level order traversal of its nodes' values.  
(Zigzag traversal means: the first level is left to right, the next is right to left, and so on).

---

## Example 1
Input:
    3
   / \
  9  20
    /  \
   15   7

Output:
[[3],[20,9],[15,7]]

---

## Example 2
Input: root = [1]  
Output: [[1]]

---

## Example 3
Input: root = []  
Output: []

---

## Constraints
- The number of nodes in the tree is in the range [0, 2000].
- -1000 <= Node.val <= 1000

---

## Approach
1. Perform normal level-order traversal using a queue.  
2. Keep track of the current level index.  
3. If the level index is even → append values left-to-right.  
   If the level index is odd → append values right-to-left (reverse order).  
4. Alternate direction at each level until traversal completes.  

---

## Complexity Analysis
- Time Complexity: O(n) → Each node is visited once.  
- Space Complexity: O(n) → Queue stores up to n nodes in the worst case.  

---

## Solution (Python)
```python
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def zigzagLevelOrder(self, root: TreeNode):
        if not root:
            return []

        result = []
        queue = [root]
        left_to_right = True  # Track traversal direction

        while queue:
            level_size = len(queue)
            level = []

            for _ in range(level_size):
                node = queue.pop(0)
                level.append(node.val)

                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

            # Reverse the level if direction is right-to-left
            if not left_to_right:
                level.reverse()

            result.append(level)
            left_to_right = not left_to_right  # Flip direction

        return result
