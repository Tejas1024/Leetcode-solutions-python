"""
LeetCode 637. Average of Levels in Binary Tree

Problem Statement:
------------------
Given the root of a binary tree, return the average value of the nodes 
on each level in the form of a list. Answers within 10^-5 of the actual 
answer will be accepted.

Example:
--------
Input:
        3
       / \
      9   20
         /  \
        15   7

Output: [3.0, 14.5, 11.0]

Explanation:
- Level 0: [3] → average = 3.0
- Level 1: [9, 20] → average = (9 + 20) / 2 = 14.5
- Level 2: [15, 7] → average = (15 + 7) / 2 = 11.0


Approach:
---------
We perform a **Breadth-First Search (BFS)** traversal (level order).
For each level:
  - Count the number of nodes.
  - Sum their values.
  - Divide sum by count to get the average.

Complexity Analysis:
--------------------
- Time Complexity: O(N), where N is the number of nodes in the tree.  
  Each node is visited once.  
- Space Complexity: O(W), where W is the maximum width of the tree (max nodes at any level).  
  In the worst case (complete binary tree), W ≈ N/2 → O(N).
"""

from collections import deque
from typing import Optional, List

# Definition for a binary tree node
class TreeNode:
    def __init__(self, val: int = 0, left: Optional['TreeNode'] = None, right: Optional['TreeNode'] = None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:
        """
        Perform level order traversal (BFS).
        For each level, calculate the average value of all nodes.
        """
        if not root:
            return []

        result = []               # stores averages of each level
        queue = deque([root])     # queue for BFS traversal

        while queue:
            level_size = len(queue)   # number of nodes in current level
            level_sum = 0

            for _ in range(level_size):
                node = queue.popleft()
                level_sum += node.val

                # add children to queue
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

            # append average of this level
            result.append(level_sum / level_size)

        return result


# -----------------------------
# Example Usage (for testing)
# -----------------------------
if __name__ == "__main__":
    """
    Example Tree:
            3
           / \
          9   20
             /  \
            15   7
    Expected Output: [3.0, 14.5, 11.0]
    """

    # Build the tree
    root = TreeNode(3)
    root.left = TreeNode(9)
    root.right = TreeNode(20, TreeNode(15), TreeNode(7))

    # Call solution
    sol = Solution()
    print(sol.averageOfLevels(root))  # Output: [3.0, 14.5, 11.0]
