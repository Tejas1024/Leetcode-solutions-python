# LeetCode Problem 124: Binary Tree Maximum Path Sum
# Difficulty: Hard

# ----------------------------
# ðŸ§  Problem Statement:
# A path in a binary tree is a sequence of nodes where each pair of adjacent nodes
# has an edge connecting them. A node can appear in the path at most once, and it does not
# need to pass through the root.
#
# The path sum of a path is the sum of the node's values in that path.
# Given the root of a binary tree, return the maximum path sum of any path.
#
# Example:
# Input: root = [-10,9,20,null,null,15,7]
# Output: 42
# Explanation: The optimal path is 15 â†’ 20 â†’ 7
# ----------------------------

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        self.max_sum = float('-inf')  # Track global maximum path sum
        
        def dfs(node):
            if not node:
                return 0
            
            # Max sum from left and right subtrees, ignoring negatives
            left_max = max(dfs(node.left), 0)
            right_max = max(dfs(node.right), 0)
            
            # Path through this node
            current_path_sum = node.val + left_max + right_max
            
            # Update global maximum
            self.max_sum = max(self.max_sum, current_path_sum)
            
            # Return best single-branch sum to parent
            return node.val + max(left_max, right_max)
        
        dfs(root)
        return self.max_sum


# ----------------------------
# ðŸ“ˆ Time Complexity: O(N)
# We visit each node exactly once.
#
# ðŸ“¦ Space Complexity: O(H)
# H = height of tree (due to recursion stack).
# ----------------------------
