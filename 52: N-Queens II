LeetCode Problem 52: N-Queens II
Difficulty: Hard

-----------------------------------------------------------
Problem Statement:
The n-queens puzzle is the problem of placing n queens on an nÃ—n chessboard 
such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

Constraints:
- 1 <= n <= 9

Example 1:
Input: n = 4
Output: 2
Explanation: There are two distinct solutions for the 4-queens puzzle.

Example 2:
Input: n = 1
Output: 1
-----------------------------------------------------------

âœ… Approach:
1. Use backtracking to explore valid placements of queens row by row.
2. Keep track of:
   - `cols` â†’ columns already occupied by queens.
   - `diag1` â†’ major diagonals (row - col).
   - `diag2` â†’ minor diagonals (row + col).
3. For each row:
   - Try placing a queen in each column.
   - If it does not conflict with existing queens â†’ place and move to next row.
   - If all rows are filled â†’ one valid solution found.
4. Count all valid solutions.

Why Backtracking?
- Because we explore all configurations and prune invalid placements early.
-----------------------------------------------------------

class Solution:
    def totalNQueens(self, n: int) -> int:
        self.count = 0
        cols = set()
        diag1 = set()  # row - col
        diag2 = set()  # row + col

        def backtrack(row):
            if row == n:
                self.count += 1
                return

            for col in range(n):
                if col in cols or (row - col) in diag1 or (row + col) in diag2:
                    continue

                # place queen
                cols.add(col)
                diag1.add(row - col)
                diag2.add(row + col)

                backtrack(row + 1)

                # remove queen (backtrack)
                cols.remove(col)
                diag1.remove(row - col)
                diag2.remove(row + col)

        backtrack(0)
        return self.count

-----------------------------------------------------------
ðŸ“Š Time Complexity: O(N!)
- Worst case, exploring all possible queen placements.
- Pruned heavily by constraints.

ðŸ§  Space Complexity: O(N)
- Sets (cols, diag1, diag2) store at most N entries.
- Recursion depth = N.
-----------------------------------------------------------
