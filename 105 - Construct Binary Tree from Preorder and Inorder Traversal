"""
LeetCode 105 - Construct Binary Tree from Preorder and Inorder Traversal

Given two integer arrays preorder and inorder where preorder is the preorder traversal 
of a binary tree and inorder is the inorder traversal of the same tree, construct and 
return the binary tree.

Example:
Input:
    preorder = [3,9,20,15,7]
    inorder = [9,3,15,20,7]
Output:
        3
       / \
      9  20
         / \
        15  7

Constraints:
- 1 <= preorder.length <= 3000
- inorder.length == preorder.length
- -3000 <= Node.val <= 3000
- preorder and inorder consist of **unique** values.
- inorder is a valid inorder traversal of a binary tree.
- preorder is a valid preorder traversal of the same tree.
"""

from typing import List, Optional

# Definition for a binary tree node
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if not preorder or not inorder:
            return None

        # 1. Root is always the first element in preorder
        root_val = preorder[0]
        root = TreeNode(root_val)

        # 2. Find index of root in inorder list
        root_index = inorder.index(root_val)

        # 3. Build left and right subtrees recursively
        root.left = self.buildTree(
            preorder[1:1+root_index],
            inorder[:root_index]
        )
        root.right = self.buildTree(
            preorder[1+root_index:],
            inorder[root_index+1:]
        )

        return root

# Sample usage (for testing):
def print_inorder(root):
    if root:
        print_inorder(root.left)
        print(root.val, end=" ")
        print_inorder(root.right)

def print_preorder(root):
    if root:
        print(root.val, end=" ")
        print_preorder(root.left)
        print_preorder(root.right)

if __name__ == "__main__":
    preorder = [3, 9, 20, 15, 7]
    inorder = [9, 3, 15, 20, 7]
    
    sol = Solution()
    root = sol.buildTree(preorder, inorder)

    print("Preorder of constructed tree:")
    print_preorder(root)  # Expected: 3 9 20 15 7

    print("\nInorder of constructed tree:")
    print_inorder(root)   # Expected: 9 3 15 20 7
