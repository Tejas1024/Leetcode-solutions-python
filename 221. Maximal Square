LeetCode 221. Maximal Square  

üìù Question:  
Given a `m x n` binary matrix filled with `'0'` and `'1'`, find the **largest square containing only 1's** and return its area.  

Example 1:  
Input: matrix = [["1","0","1","0","0"],
                 ["1","0","1","1","1"],
                 ["1","1","1","1","1"],
                 ["1","0","0","1","0"]]  
Output: 4  
Explanation: Largest square is 2x2 ‚Üí area = 4  

Example 2:  
Input: matrix = [["0","1"],["1","0"]]  
Output: 1  


-----------------------------------------------------------
‚úÖ Approach: Dynamic Programming  

- Define `dp[i][j]` = side length of the largest square **ending at (i,j)**.  
- Transition:  
  - If `matrix[i][j] == '1'`:  
    `dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])`  
  - Else: `dp[i][j] = 0`  
- Keep track of `max_side` while filling DP.  
- Answer = `max_side ** 2`.  

‚ö° Key Trick:  
Use first row and first column as DP base ‚Üí handle edges carefully.  


-----------------------------------------------------------
üíª Solution:
class Solution:
    def maximalSquare(self, matrix: list[list[str]]) -> int:
        if not matrix or not matrix[0]:
            return 0

        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        max_side = 0

        for i in range(m):
            for j in range(n):
                if matrix[i][j] == '1':
                    if i == 0 or j == 0:
                        dp[i][j] = 1
                    else:
                        dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
                    max_side = max(max_side, dp[i][j])

        return max_side * max_side
-----------------------------------------------------------
‚è±Ô∏è Time Complexity: O(m * n)  
   - Each cell visited once  

üíæ Space Complexity: O(m * n)  
   - DP table of size m x n  
-----------------------------------------------------------
