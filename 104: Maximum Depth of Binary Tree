# LeetCode Problem 104: Maximum Depth of Binary Tree
# Difficulty: Easy

# ----------------------------
# 🧠 Problem Statement:
# Given the root of a binary tree, return its maximum depth.
# A binary tree's maximum depth is the number of nodes along 
# the longest path from the root node down to the farthest leaf node.
#
# Example:
# Input: root = [3,9,20,null,null,15,7]
# Output: 3
# ----------------------------

# ✅ Approach:
# Use recursion (Depth-First Search).
# For each node:
# - Recursively calculate the max depth of its left and right subtrees.
# - The depth at that node is 1 + max(left_depth, right_depth).
# - If the node is None (i.e., empty tree or leaf), return 0.

# 👨‍💻 Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        # 🌱 Base case: If the current node is None (empty), depth is 0
        if root is None:
            return 0
        
        # 🔁 Recursively find the depth of left and right subtrees
        left_depth = self.maxDepth(root.left)
        right_depth = self.maxDepth(root.right)
        
        # 📈 Add 1 for the current node and return the max of left/right depth
        return 1 + max(left_depth, right_depth)

# ----------------------------
# 📊 Time Complexity: O(n)
# - We visit every node in the binary tree once.
# - 'n' is the total number of nodes.

# 🧠 Space Complexity: O(h)
# - 'h' is the height of the tree.
# - Space is used by the recursion stack.
# - In the worst case (skewed tree), h = n → O(n)
# - In the best case (balanced tree), h = log(n) → O(log n)
# ----------------------------
