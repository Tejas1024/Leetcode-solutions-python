# LeetCode 373: Find K Pairs with Smallest Sums
# Difficulty: Medium

"""
📝 Question:
You are given two integer arrays nums1 and nums2 sorted in ascending order 
and an integer k.

Define a pair (u,v) which consists of one element from nums1 and one from nums2.  
Return the k pairs (u1,v1), (u2,v2), ... with the **smallest sums**.

Example 1:
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]

Example 2:
Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]

Example 3:
Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
"""

"""
💡 Approach:
1. We want the k smallest sums of pairs from two sorted arrays.
2. Use a **min-heap** to efficiently get the next smallest pair:
   - Start with pairs combining nums1[0] with all nums2 elements.
   - Push their sum and indices into the heap.
3. Pop the smallest sum from the heap k times:
   - Record the pair.
   - Push the next pair with the next element from nums1 (or nums2) if available.
4. Continue until k pairs are found or heap is empty.

⚡ Beginner Explanation:
- Think of the heap as a "priority queue" where the smallest sum comes first.
- Instead of generating all pairs (which is O(n*m)), we only track the next possible smallest pairs.
"""

class Solution:
    def kSmallestPairs(self, nums1: list[int], nums2: list[int], k: int) -> list[list[int]]:
        result = []
        if not nums1 or not nums2:
            return result
        
        # Min-heap: store tuples (sum, i, j)
        heap = []
        for i in range(min(k, len(nums1))):  # only first k elements from nums1
            heap.append((nums1[i] + nums2[0], i, 0))
        
        import heapq
        heapq.heapify(heap)
        
        while heap and len(result) < k:
            current_sum, i, j = heapq.heappop(heap)
            result.append([nums1[i], nums2[j]])
            if j + 1 < len(nums2):
                heapq.heappush(heap, (nums1[i] + nums2[j+1], i, j+1))
        
        return result

"""
⏱ Time Complexity:
- Heap operations: O(k log min(n1,k)) where n1 = len(nums1)
- Worst-case: O(k log k) since heap never grows beyond k elements.

💾 Space Complexity:
- O(min(n1,k)) for heap + O(k) for result
"""
