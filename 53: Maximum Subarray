"""
LeetCode Problem 53: Maximum Subarray
Difficulty: Medium

-----------------------------------------------------------
Problem Statement:
Given an integer array nums, find the contiguous subarray 
(containing at least one number) which has the largest sum 
and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
-----------------------------------------------------------

âœ… Approach (Kadaneâ€™s Algorithm):
1. Keep track of:
   - current_sum â†’ maximum subarray sum ending at the current index.
   - max_sum â†’ best (maximum) sum found so far.
2. For each number:
   - Either extend the previous subarray OR start a new one.
   - This is done with: current_sum = max(num, current_sum + num).
3. Update max_sum each time.
4. Return max_sum.

This is a dynamic programming approach in O(n).
-----------------------------------------------------------
"""

class Solution:
    def maxSubArray(self, nums):
        current_sum = nums[0]   # start with first element
        max_sum = nums[0]       # best result so far

        for i in range(1, len(nums)):
            # extend or restart subarray
            current_sum = max(nums[i], current_sum + nums[i])
            # update answer
            max_sum = max(max_sum, current_sum)

        return max_sum


"""
-----------------------------------------------------------
ðŸ“Š Time Complexity: O(n)
- We scan the array once, updating sums.

ðŸ§  Space Complexity: O(1)
- Only two variables used: current_sum and max_sum.
-----------------------------------------------------------
"""
