# LeetCode 289. Game of Life
# Difficulty: Medium
# 
# Problem:
# Write a program to compute the next state (after one update) of the board
# according to the "Game of Life" rules:
#
# 1. Any live cell with fewer than 2 live neighbors dies (under-population).
# 2. Any live cell with 2 or 3 live neighbors lives on to the next generation.
# 3. Any live cell with more than 3 live neighbors dies (over-population).
# 4. Any dead cell with exactly 3 live neighbors becomes a live cell (reproduction).
#
# You must update the board in-place.

class Solution:
    def gameOfLife(self, board: list[list[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        rows, cols = len(board), len(board[0])

        # Helper function: count live neighbors
        def count_live_neighbors(r, c):
            directions = [
                (-1, -1), (-1, 0), (-1, 1),   # top-left, top, top-right
                (0, -1),           (0, 1),    # left, right
                (1, -1),  (1, 0),  (1, 1)     # bottom-left, bottom, bottom-right
            ]
            count = 0
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < rows and 0 <= nc < cols:
                    # abs(board[nr][nc]) == 1 means cell was originally alive
                    if abs(board[nr][nc]) == 1:
                        count += 1
            return count

        # Step 1: Apply rules with markers
        #  -1 → alive -> dead
        #   2 → dead -> alive
        for r in range(rows):
            for c in range(cols):
                live_neighbors = count_live_neighbors(r, c)

                # Rule 1 or 3: live cell dies
                if board[r][c] == 1 and (live_neighbors < 2 or live_neighbors > 3):
                    board[r][c] = -1

                # Rule 4: dead cell becomes live
                if board[r][c] == 0 and live_neighbors == 3:
                    board[r][c] = 2

        # Step 2: Finalize board (normalize values)
        for r in range(rows):
            for c in range(cols):
                if board[r][c] > 0:
                    board[r][c] = 1
                else:
                    board[r][c] = 0
