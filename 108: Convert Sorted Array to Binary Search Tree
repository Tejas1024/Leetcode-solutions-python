"""
LeetCode Problem 108: Convert Sorted Array to Binary Search Tree
Difficulty: Easy

-----------------------------------------------------------
Problem Statement:
Given an integer array `nums` sorted in ascending order, 
convert it to a **height-balanced binary search tree (BST)**.

- A height-balanced BST is a binary tree in which the depth of the two subtrees 
  of every node never differs by more than 1.

Example 1:
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible BST is:
      0
     / \
   -3   9
   /   /
 -10  5

Example 2:
Input: nums = [1,3]
Output: [3,1]
-----------------------------------------------------------

âœ… Approach:
1. Use recursion to build the tree.
2. Always pick the **middle element** of the current array/subarray as root.
3. Recursively build left and right subtrees from the left and right halves.
4. Base case: return None when subarray is empty.
-----------------------------------------------------------
"""

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def sortedArrayToBST(self, nums):
        # Base case: empty array
        if not nums:
            return None

        mid = len(nums) // 2
        root = TreeNode(nums[mid])

        # Build left subtree from left half
        root.left = self.sortedArrayToBST(nums[:mid])
        # Build right subtree from right half
        root.right = self.sortedArrayToBST(nums[mid+1:])

        return root

"""
-----------------------------------------------------------
ðŸ“Š Time Complexity: O(n)
- Every element is visited once to create a TreeNode.

ðŸ§  Space Complexity: O(log n)
- Recursion stack height = log n for balanced BST.
-----------------------------------------------------------
"""
