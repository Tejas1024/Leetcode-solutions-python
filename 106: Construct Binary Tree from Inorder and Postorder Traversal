"""
LeetCode 106: Construct Binary Tree from Inorder and Postorder Traversal

Problem:
Given two integer arrays `inorder` and `postorder` where:
- inorder is the inorder traversal of a binary tree,
- postorder is the postorder traversal of the same tree,

Construct and return the binary tree.

Example:
Input: 
    inorder =   [9, 3, 15, 20, 7]
    postorder = [9, 15, 7, 20, 3]
Output: 
    Tree: [3,9,20,null,null,15,7]

Approach:
- Use recursion to build the tree.
- In postorder, the last element is always the root.
- Find that element in the inorder list to separate left and right subtrees.
- Use a hashmap for quick index lookup in inorder list.
"""

from typing import List, Optional

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Optional['TreeNode'] = None, right: Optional['TreeNode'] = None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        # Create a hashmap to store the value -> index relations of inorder traversal
        inorder_index_map = {val: idx for idx, val in enumerate(inorder)}

        # Recursive function to build tree
        def helper(left: int, right: int) -> Optional[TreeNode]:
            if left > right:
                return None

            # Pop the last element from postorder as it's the root
            root_val = postorder.pop()
            root = TreeNode(root_val)

            # Get the index of the root in inorder traversal
            index = inorder_index_map[root_val]

            # Build right and left subtrees
            root.right = helper(index + 1, right)
            root.left = helper(left, index - 1)

            return root

        return helper(0, len(inorder) - 1)

# Sample usage to test output (can be removed in LeetCode submission)
def print_preorder(root: Optional[TreeNode]) -> List[int]:
    if not root:
        return []
    return [root.val] + print_preorder(root.left) + print_preorder(root.right)

if __name__ == "__main__":
    inorder = [9, 3, 15, 20, 7]
    postorder = [9, 15, 7, 20, 3]
    sol = Solution()
    tree = sol.buildTree(inorder, postorder)
    print("Preorder traversal of the constructed tree:", print_preorder(tree))
