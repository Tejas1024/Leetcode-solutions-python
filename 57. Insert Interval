LeetCode 57. Insert Interval  

📝 Question:  
Given a list of non-overlapping intervals `intervals` sorted by start time, and a new interval `newInterval`, insert `newInterval` into `intervals` **merging if necessary**. Return the resulting intervals sorted by start time.  

Example 1:  
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]  
Output: [[1,5],[6,9]]  
Explanation: [2,5] overlaps with [1,3] → merge to [1,5].  

Example 2:  
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]  
Output: [[1,2],[3,10],[12,16]]  
Explanation: [4,8] overlaps with [3,5],[6,7],[8,10] → merge to [3,10].  


-----------------------------------------------------------
✅ Approach: Linear Scan + Merge  

1. Add all intervals that end **before** `newInterval` → no overlap.  
2. Merge all intervals that **overlap** with `newInterval`:  
   - newInterval[0] = min(newInterval[0], current[0])  
   - newInterval[1] = max(newInterval[1], current[1])  
3. Add the merged `newInterval` to result.  
4. Add remaining intervals that start **after** `newInterval`.  

⚡ Key Trick:  
Process intervals in **one pass** → O(n) time.  


-----------------------------------------------------------
💻 Solution:
class Solution:
    def insert(self, intervals: list[list[int]], newInterval: list[int]) -> list[list[int]]:
        result = []
        i, n = 0, len(intervals)

        # Step 1: Add intervals before newInterval
        while i < n and intervals[i][1] < newInterval[0]:
            result.append(intervals[i])
            i += 1

        # Step 2: Merge overlapping intervals
        while i < n and intervals[i][0] <= newInterval[1]:
            newInterval[0] = min(newInterval[0], intervals[i][0])
            newInterval[1] = max(newInterval[1], intervals[i][1])
            i += 1
        result.append(newInterval)

        # Step 3: Add remaining intervals
        while i < n:
            result.append(intervals[i])
            i += 1

        return result

-----------------------------------------------------------
⏱️ Time Complexity: O(n)  
   - Each interval processed once  

💾 Space Complexity: O(n)  
   - Result list stores all intervals  
-----------------------------------------------------------
