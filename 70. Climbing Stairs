LeetCode 70. Climbing Stairs

📝 Question:  
You are climbing a staircase. It takes `n` steps to reach the top.  
Each time you can climb **1 or 2 steps**.  
Return the number of distinct ways you can climb to the top.

Example 1:  
Input: n = 2  
Output: 2  
Explanation: 1 step + 1 step, or 2 steps.

Example 2:  
Input: n = 3  
Output: 3  
Explanation: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step.

-----------------------------------------------------------
✅ Approach:  
This is the **Fibonacci problem** in disguise.

1. If `n = 1`, only one way (1).  
2. If `n = 2`, two ways (1+1, 2).  
3. For `n >= 3`:  
   - To reach step `n`, you could come from `n-1` or `n-2`.  
   - So: `ways(n) = ways(n-1) + ways(n-2)`.  
4. Use **Dynamic Programming** (bottom-up).  

⚡ Key Trick:  
Instead of storing all values, just keep the last two (`prev1`, `prev2`) → O(1) space.

-----------------------------------------------------------
💻 Solution:
```python
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        
        prev1, prev2 = 1, 2  # ways for 1 and 2 steps
        for i in range(3, n + 1):
            curr = prev1 + prev2
            prev1, prev2 = prev2, curr
        
        return prev2
```

-----------------------------------------------------------
⏱️ Time Complexity: O(n)  
   - We compute once for each step up to `n`.

💾 Space Complexity: O(1)  
   - Only two variables needed (`prev1`, `prev2`).  
-----------------------------------------------------------
