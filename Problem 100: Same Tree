# LeetCode Problem 100: Same Tree
# Difficulty: Easy

# --------------------------------------
# 🧠 Problem Statement:
# Given the roots of two binary trees p and q, write a function to check if they are the same or not.
#
# Two binary trees are considered the same if they are structurally identical,
# and the nodes have the same value.
#
# Example 1:
# Input: p = [1,2,3], q = [1,2,3]
# Output: true
#
# Example 2:
# Input: p = [1,2], q = [1,null,2]
# Output: false
# ----------------------------

# ✅ Approach:
# Use recursion to compare both trees node by node.
# - If both nodes are None → trees are same at this branch.
# - If one is None and the other is not → trees are different.
# - If values are different → trees are different.
# - Recursively compare left children and right children.

# 👨‍💻 Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        # Case 1: Both nodes are None
        if not p and not q:
            return True
        
        # Case 2: One node is None, or values are different
        if not p or not q or p.val != q.val:
            return False
        
        # Case 3: Recursively compare left and right subtrees
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

# ----------------------------
# 📊 Time Complexity: O(n)
# - We visit every node in both trees once.
# - 'n' is the number of nodes in the smaller tree (if unequal size).

# 🧠 Space Complexity: O(h)
# - 'h' is the height of the trees.
# - Space is used by the recursion stack.
# - Worst case (skewed trees): O(n)
# - Best case (balanced trees): O(log n)
# ----------------------------
