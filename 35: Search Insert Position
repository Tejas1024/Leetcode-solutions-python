LeetCode Problem 35: Search Insert Position  
Difficulty: Easy  

-----------------------------------------------------------
Problem Statement:  
Given a sorted array of distinct integers and a target value,  
return the index if the target is found. If not, return the  
index where it would be if it were inserted in order.  

You must write an algorithm with O(log n) runtime complexity.  

Example 1:  
Input: nums = [1,3,5,6], target = 5  
Output: 2  

Example 2:  
Input: nums = [1,3,5,6], target = 2  
Output: 1  

Example 3:  
Input: nums = [1,3,5,6], target = 7  
Output: 4  
-----------------------------------------------------------  

âœ… Approach:  
1. Since the array is **sorted**, we can use **Binary Search**.  
2. Initialize:  
   - `left = 0`  
   - `right = len(nums) - 1`  
3. While `left <= right`:  
   - Find middle index: `mid = (left + right) // 2`  
   - If `nums[mid] == target`, return `mid`.  
   - If `nums[mid] < target`, search right (`left = mid + 1`).  
   - Else, search left (`right = mid - 1`).  
4. If not found, the correct insertion position is `left`.  

-----------------------------------------------------------

class Solution:
    def searchInsert(self, nums, target):
        left, right = 0, len(nums) - 1

        while left <= right:
            mid = (left + right) // 2

            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1

        # If target not found, left will be the insert position
        return left

-----------------------------------------------------------
ðŸ“Š Time Complexity: O(log n)  
- Binary search cuts the search space in half each step.  

ðŸ§  Space Complexity: O(1)  
- No extra data structures used.  
-----------------------------------------------------------
