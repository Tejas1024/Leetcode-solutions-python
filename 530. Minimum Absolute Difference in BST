"""
530. Minimum Absolute Difference in BST
---------------------------------------
Given the root of a Binary Search Tree (BST), return the minimum absolute 
difference between the values of any two different nodes in the tree.

Example:
---------
Input:
    root = [4,2,6,1,3]
Output:
    1
Explanation:
    The minimum absolute difference is |2 - 1| = 1 or |3 - 2| = 1.

Constraints:
------------
- The number of nodes in the tree is in the range [2, 10^4].
- 0 <= Node.val <= 10^5
"""

# Definition for a binary tree node.
from typing import Optional, List

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:
        """
        Approach:
        ---------
        - A Binary Search Tree (BST) has the property: 
              inorder traversal -> sorted order of values.
        - So, if we perform inorder traversal, the minimum absolute 
          difference will always occur between two consecutive nodes 
          in that sorted order.
        
        Steps:
        1. Traverse the BST in inorder (Left -> Root -> Right).
        2. Keep track of the previous node value.
        3. Update the minimum difference using |current - previous|.
        4. Return the minimum difference found.

        Time Complexity:  O(n)  (we visit every node once)
        Space Complexity: O(h)  (recursion stack, h = height of tree; worst case O(n))
        """

        self.prev = None     # Stores the previous node value in inorder traversal
        self.min_diff = float("inf")  # Start with infinity

        def inorder(node):
            if not node:
                return
            # Traverse left subtree
            inorder(node.left)

            # Process current node
            if self.prev is not None:
                self.min_diff = min(self.min_diff, node.val - self.prev)
            self.prev = node.val

            # Traverse right subtree
            inorder(node.right)

        inorder(root)
        return self.min_diff
