"""
LeetCode Problem 148: Sort List
Difficulty: Medium

-----------------------------------------------------------
Problem Statement:
Given the head of a linked list, sort the list in **ascending order** and return its head.

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
Input: head = []
Output: []
-----------------------------------------------------------

âœ… Approach:
1. Use **merge sort** for linked lists:
   - Find the middle of the list using slow and fast pointers.
   - Recursively sort the left half and right half.
   - Merge the two sorted halves.
2. Merge function connects nodes in ascending order.
-----------------------------------------------------------
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

from typing import Optional

class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head  # Base case: empty or single node

        # Step 1: Find middle of the list
        slow, fast = head, head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        mid = slow.next
        slow.next = None  # Split the list into two halves

        # Step 2: Recursively sort left and right halves
        left = self.sortList(head)
        right = self.sortList(mid)

        # Step 3: Merge the sorted halves
        return self.merge(left, right)

    def merge(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode(0)
        tail = dummy

        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next

        tail.next = l1 if l1 else l2  # Append remaining nodes
        return dummy.next

"""
-----------------------------------------------------------
ðŸ“Š Time Complexity: O(n log n)
- Each merge step touches all nodes, and recursion splits the list log n times.

ðŸ§  Space Complexity: O(log n)
- Recursion stack depth = log n for merge sort on linked list.
-----------------------------------------------------------
"""
