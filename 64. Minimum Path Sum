LeetCode 64. Minimum Path Sum  

üìù Question:  
Given an `m x n` grid filled with non-negative numbers, find a path from top-left to bottom-right  
which minimizes the sum of all numbers along its path. You can only move **down or right** at any point.  

Example 1:  
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]  
Output: 7  
Explanation: Path 1 ‚Üí 3 ‚Üí 1 ‚Üí 1 ‚Üí 1, sum = 7  

Example 2:  
Input: grid = [[1,2,3],[4,5,6]]  
Output: 12  


-----------------------------------------------------------
‚úÖ Approach: Dynamic Programming (In-Place)

- Start from the **top-left** and calculate minimum path sum for each cell.  
- Transition:  
  - `grid[i][j] += min(grid[i-1][j], grid[i][j-1])`  
  - Handle first row/first column separately.  
- The bottom-right cell `grid[m-1][n-1]` holds the answer.  

‚ö° Key Trick:  
Update grid in-place ‚Üí no extra space needed.  


-----------------------------------------------------------
üíª Solution:
class Solution:
    def minPathSum(self, grid: list[list[int]]) -> int:
        m, n = len(grid), len(grid[0])

        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    continue
                elif i == 0:
                    grid[i][j] += grid[i][j-1]
                elif j == 0:
                    grid[i][j] += grid[i-1][j]
                else:
                    grid[i][j] += min(grid[i-1][j], grid[i][j-1])

        return grid[m-1][n-1]

-----------------------------------------------------------
‚è±Ô∏è Time Complexity: O(m * n)  
   - Each cell is visited once.  

üíæ Space Complexity: O(1)  
   - In-place DP, no extra space needed.  
-----------------------------------------------------------
